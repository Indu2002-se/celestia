{"version":3,"file":"static/js/19.11b1c610.chunk.js","mappings":"kJAiBO,MAAMA,EAAwBC,UAEnC,MAAMC,EAAiB,CAAC,aAAc,QAAS,OAAQ,cAAe,aAAc,oBACpF,IAAK,MAAMC,KAASD,EAClB,IAAKE,EAAYD,GACf,MAAM,IAAIE,MAAM,2BAA2BF,KAM/C,IADmB,6BACHG,KAAKF,EAAYG,OAC/B,MAAM,IAAIF,MAAM,yBAKlB,IACIG,EADAC,EAAU,EAGd,KAAOA,EAJY,GAKjB,IACEA,IAGA,MAAM,KAAEC,EAAI,MAAEC,SAAgBC,EAAAA,EAASC,UAAUC,OAAO,0BAA2B,CACjFC,KAAMX,IAGR,GAAIO,EAAO,MAAMA,EASjB,aANMC,EAAAA,EACHI,KAAK,YACLC,OAAO,CAAEC,YAAY,IACrBC,GAAG,KAAMf,EAAYgB,YAExBC,QAAQC,IAAI,8BAA8BlB,EAAYG,mBAAmBE,MAClEC,CACT,CAAE,MAAOC,GAKP,GAJAU,QAAQV,MAAM,8CAA8CF,MAAaE,GACzEH,EAAYG,EAGRF,EA5BW,EA4BW,CACxB,MAAMc,EAAqC,IAAvBC,KAAKC,IAAI,EAAGhB,SAC1B,IAAIiB,QAAQC,GAAWC,WAAWD,EAASJ,GACnD,CACF,CAKF,MADAF,QAAQV,MAAM,yCACRH,GAAa,IAAIH,MAAM,qC","sources":["utils/emailService.js"],"sourcesContent":["import { supabase } from '../supabaseClient';\r\n\r\n/**\r\n * Send a confirmation email to the user after booking\r\n * \r\n * @param {Object} bookingData - The booking details\r\n * @param {string} bookingData.booking_id - The booking ID\r\n * @param {string} bookingData.email - The user's email\r\n * @param {string} bookingData.name - The user's name\r\n * @param {string} bookingData.event_title - The event title\r\n * @param {string} bookingData.event_date - The event date\r\n * @param {string} bookingData.event_location - The event location\r\n * @param {number} bookingData.quantity - The number of tickets\r\n * @param {string} bookingData.reference_number - The booking reference number\r\n * @param {number} bookingData.total_amount - The total amount paid\r\n * @returns {Promise<Object>} - The response from Supabase\r\n */\r\nexport const sendConfirmationEmail = async (bookingData) => {\r\n  // Validate required fields\r\n  const requiredFields = ['booking_id', 'email', 'name', 'event_title', 'event_date', 'reference_number'];\r\n  for (const field of requiredFields) {\r\n    if (!bookingData[field]) {\r\n      throw new Error(`Missing required field: ${field}`);\r\n    }\r\n  }\r\n\r\n  // Email validation\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  if (!emailRegex.test(bookingData.email)) {\r\n    throw new Error('Invalid email address');\r\n  }\r\n  \r\n  // Max retries for resiliency\r\n  const maxRetries = 3;\r\n  let attempt = 0;\r\n  let lastError;\r\n  \r\n  while (attempt < maxRetries) {\r\n    try {\r\n      attempt++;\r\n      \r\n      // Call the Supabase Edge Function to send the email\r\n      const { data, error } = await supabase.functions.invoke('send-confirmation-email', {\r\n        body: bookingData\r\n      });\r\n      \r\n      if (error) throw error;\r\n      \r\n      // Update the booking to mark email as sent\r\n      await supabase\r\n        .from('bookings')\r\n        .update({ email_sent: true })\r\n        .eq('id', bookingData.booking_id);\r\n      \r\n      console.log(`Email sent successfully to ${bookingData.email} (Attempt: ${attempt})`);\r\n      return data;\r\n    } catch (error) {\r\n      console.error(`Error sending confirmation email (Attempt: ${attempt}):`, error);\r\n      lastError = error;\r\n      \r\n      // Wait a bit before retrying (exponential backoff)\r\n      if (attempt < maxRetries) {\r\n        const backoffTime = Math.pow(2, attempt) * 500; // 1s, 2s, 4s\r\n        await new Promise(resolve => setTimeout(resolve, backoffTime));\r\n      }\r\n    }\r\n  }\r\n  \r\n  // After all retries failed\r\n  console.error(`Failed to send email after ${maxRetries} attempts`);\r\n  throw lastError || new Error('Failed to send confirmation email');\r\n}; "],"names":["sendConfirmationEmail","async","requiredFields","field","bookingData","Error","test","email","lastError","attempt","data","error","supabase","functions","invoke","body","from","update","email_sent","eq","booking_id","console","log","backoffTime","Math","pow","Promise","resolve","setTimeout"],"sourceRoot":""}